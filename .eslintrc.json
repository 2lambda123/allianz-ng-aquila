{
    "root": true,
    "ignorePatterns": ["projects/**/*"],
    "overrides": [
        {
            "files": ["*.ts"],
            "parserOptions": {
                "project": ["tsconfig.json"],
                "createDefaultProgram": true
            },
            "extends": [
                "eslint:recommended",
                "plugin:@typescript-eslint/recommended",
                "plugin:@angular-eslint/base",
                "plugin:@angular-eslint/template/process-inline-templates",
                "prettier"
            ],
            "plugins": ["deprecation"],
            "rules": {
                "deprecation/deprecation": "warn",

                // ==== eslint: possible problems ====

                "no-self-compare": "error",
                "no-unreachable-loop": "error",
                "no-unused-private-class-members": "warn",

                // ==== eslint: suggestions ====

                "arrow-body-style": "off", // TODO check with others
                "curly": "error",
                "default-case-last": "error",
                "eqeqeq": ["error", "always", { "null": "ignore" }],
                "func-style": ["error", "declaration", { "allowArrowFunctions": true }],
                "grouped-accessor-pairs": ["off", "setBeforeGet"], // TODO resolve and set warn
                "guard-for-in": "error",
                "no-alert": "off", // TODO in-line with design?
                "no-bitwise": "error",
                "no-caller": "error",
                "no-console": ["off", { "allow": ["warn", "error"] }], // TODO check with others
                "no-continue": "error",
                "no-else-return": "error",
                "no-empty": ["error", { "allowEmptyCatch": true }], // recommended override: allow empty catch block
                "no-eval": "error",
                "no-extend-native": "error",
                "no-extra-bind": "error",
                "no-extra-label": "error",
                "no-iterator": "error",
                "no-lone-blocks": "error",
                "no-lonely-if": "error",
                "no-multi-str": "error",
                "no-negated-condition": "off", // TODO check with others
                "no-new-func": "error",
                "no-new-object": "error",
                "no-new-wrappers": "error",
                "no-octal-escape": "error",
                "no-param-reassign": "off", // TODO resolve and set error
                "no-proto": "error",
                "no-script-url": "error",
                "no-undef-init": "error",
                "no-unneeded-ternary": "error",
                "no-useless-computed-key": ["error", { "enforceForClassMembers": true }],
                "no-useless-concat": "error",
                "no-useless-rename": "error",
                "no-useless-return": "error",
                "no-warning-comments": ["warn", { "terms": ["todo"] }],
                "object-shorthand": ["error", "always", { "avoidQuotes": true }],
                "operator-assignment": "error",
                "prefer-arrow-callback": ["error", { "allowUnboundThis": false }],
                "prefer-exponentiation-operator": "error",
                "prefer-numeric-literals": "error",
                "prefer-object-spread": "error",
                "prefer-regex-literals": "off", // TODO check with others
                "radix": "error",
                "require-unicode-regexp": "off", // TODO check with others
                "sort-imports": ["off", { "memberSyntaxSortOrder": ["multiple", "all", "single", "none"], "allowSeparatedGroups": true }], // TODO test
                "spaced-comment": ["error", "always", { "markers": ["/"], "exceptions": ["*"] }],
                "symbol-description": "error",
                "yoda": ["error", "never", { "exceptRange": true }],

                // ==== @typescript-eslint: supported rules ====

                "@typescript-eslint/array-type": "error",
                "@typescript-eslint/ban-ts-comment": ["off", { "ts-expect-error": "allow-with-description" }], // TODO enable es warn
                "@typescript-eslint/ban-types": "off", // TODO resolve and kick
                "@typescript-eslint/class-literal-property-style": ["error", "fields"],
                "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
                "@typescript-eslint/consistent-type-exports": "error",
                "@typescript-eslint/explicit-member-accessibility": ["error", { "accessibility": "no-public" }],
                "@typescript-eslint/member-ordering": "off", // TODO specify options
                "@typescript-eslint/method-signature-style": ["error", "method"],
                "@typescript-eslint/no-confusing-non-null-assertion": "error",
                "@typescript-eslint/no-empty-interface": ["error", { "allowSingleExtends": true }],
                "@typescript-eslint/no-explicit-any": "off", // TODO test, if viable for this project
                "@typescript-eslint/no-non-null-assertion": "off", // TODO create ticket
                "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
                "@typescript-eslint/no-var-requires": "off", // TODO replace occurrences with proper imports
                "@typescript-eslint/non-nullable-type-assertion-style": "off", // TODO problematic with current specs
                "@typescript-eslint/prefer-function-type": "error",
                "@typescript-eslint/prefer-readonly": "off", // TODO check with others
                "@typescript-eslint/prefer-reduce-type-parameter": "error",
                "@typescript-eslint/prefer-return-this-type": "error",
                "@typescript-eslint/prefer-string-starts-ends-with": "error",
                "@typescript-eslint/prefer-ts-expect-error": "error",
                "@typescript-eslint/promise-function-async": "error",
                "@typescript-eslint/triple-slash-reference": "off", // TODO resolve and kick

                // ==== @typescript-eslint: extension rules ====

                "no-array-constructor": "off",
                "@typescript-eslint/no-array-constructor": "error",
                "no-dupe-class-members": "off",
                "@typescript-eslint/no-dupe-class-members": "error",
                "no-empty-function": "off",
                "@typescript-eslint/no-empty-function": "off", // recommended override: empty event callbacks are used frequently
                "no-unused-vars": "off",
                "@typescript-eslint/no-unused-vars": "off" // TODO enable with custom options
            }
        },
        {
            "files": ["*.html"],
            "extends": ["plugin:@angular-eslint/template/base"],
            "rules": {
                // @angular-eslint/template rules go here
            }
        }
    ]
}
